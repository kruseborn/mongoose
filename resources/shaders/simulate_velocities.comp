#version 450
#extension GL_ARB_shading_language_420pack : enable

layout (set = 0, binding = 0) uniform UBO {
	float dt;
} ubo;

struct Particle {
	vec4 position;
	vec4 velocity;
};
layout(set = 1, binding = 0) buffer Storage {
   Particle particles[];
} storage;

layout (constant_id = 1) const float GRAVITY = 0.002;
layout (constant_id = 2) const float POWER = 0.75;
layout (constant_id = 3) const float SOFTEN = 0.0075;

#define localGroupSize 256
shared vec4 sharedData[localGroupSize];
layout (local_size_x = localGroupSize) in;

const float    gravity_constant  = 0.001;
const float    softening_squared = 0.005;
const float    power             = 1.5;

vec3 bodyBodyInteraction(vec3 r, float m_j)
{       
    return gravity_constant * r * m_j / pow(dot(r,r) + softening_squared, power);
} 

void main() {
	const uint index = gl_GlobalInvocationID.x;
  
  vec4 position = storage.particles[index].position;
	vec3 acceleration = vec3(0.0);

	for (uint i = 0; i < gl_NumWorkGroups.x; i++) {
    uint globalParticleIndex = gl_LocalInvocationID.x + i * gl_WorkGroupSize.x;
		sharedData[gl_LocalInvocationID.x] = storage.particles[globalParticleIndex].position;

		memoryBarrierShared();
		barrier();

		for (uint j = 0; j < gl_WorkGroupSize.x; j++) {
      // vec4 otherParticle = sharedData[j];

      // vec3 r =  otherParticle.xyz - position.xyz;
      // float distSqr = dot(r,r); // Softening factor;
      // distSqr = pow(distSqr, 0.75);

      // float s = otherParticle.w * 1.0 / distSqr;
			// acceleration.xyz +=  r * s;
			vec4 body = sharedData[j];
			acceleration.xyz += bodyBodyInteraction(body.xyz - position.xyz, body.w);

		}
		memoryBarrierShared();
		barrier();
	}
	storage.particles[index].velocity.xyz += acceleration * ubo.dt;
}