#version 450
#extension GL_ARB_shading_language_420pack : enable

layout (set = 0, binding = 0) uniform Ubo {
	float dt;
} ubo;

struct Particle {
	vec4 position;
	vec4 velocity;
};
layout(set = 1, binding = 0) buffer Storage {
   Particle particles[];
} storage;

#define localGroupSize 256
shared vec4 sharedData[localGroupSize];
layout (local_size_x = localGroupSize) in;

void main() {
	const uint index = gl_GlobalInvocationID.x;
  
  vec4 position = storage.particles[index].position;
	vec3 acceleration = vec3(0.0);

	for (uint i = 0; i < gl_NumWorkGroups.x; i++) {
    uint globalParticleIndex = gl_LocalInvocationID.x + i * gl_WorkGroupSize.x;
		sharedData[gl_LocalInvocationID.x] = storage.particles[globalParticleIndex].position;

		memoryBarrierShared();
		barrier();

		for (uint j = 0; j < gl_WorkGroupSize.x; j++) {
      vec4 otherParticle = sharedData[j];

      vec3 r =  otherParticle.xyz - position.xyz;
      float distSqr = dot(r,r) + 0.005; // Softening factor;
      distSqr = pow(distSqr, 1.5); // ^1/3
      float s = otherParticle.w / distSqr;
			acceleration.xyz +=  r * s;
		}
		memoryBarrierShared();
		barrier();
	}
	// G = 0.001
	storage.particles[index].velocity.xyz += 0.001 * acceleration * ubo.dt;
}