#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable

layout (set = 0, binding = 0) uniform Ubo {
	// mat4 model;
	// mat4 view;
	// mat4 projection;
	// mat4 modelIT;
	mat4 viewInverse;
	mat4 projInverse;
} ubo;

@gen
layout(set = 1, binding = 0, rgba8) uniform image2D image;
layout(set = 2, binding = 0) uniform accelerationStructureNV topLevelAS;

layout(location = 0) rayPayloadNV vec3 hitValue;

void main() {
	const vec2 pixelCenter  = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeNV.xy);
	vec2 ndc = inUV * 2.0 - 1.0;

	vec4 origin = ubo.viewInverse * vec4(0,0,0,1);
	vec4 target = ubo.projInverse * vec4(ndc.x, ndc.y, 1, 1);
	vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz), 0);

	uint rayFlags = gl_RayFlagsOpaqueNV;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hitValue, 1.0));
}

@miss
layout(location = 0) rayPayloadInNV vec3 hitValue;

void main()  {
	hitValue = vec3(0,0,0.3);
}

@hit
layout(location = 0) rayPayloadInNV vec3 hitValue;

void main() {
	hitValue = vec3(1,0,0);
}
