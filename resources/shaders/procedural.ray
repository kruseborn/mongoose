#version 460
#extension GL_NV_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable

layout (set = 0, binding = 0) uniform Ubo {
	// mat4 model;
	// mat4 view;
	// mat4 projection;
	// mat4 modelIT;
	mat4 viewInverse;
	mat4 projInverse;
} ubo;

@gen
layout(set = 1, binding = 0, rgba8) uniform image2D image;
layout(set = 2, binding = 0) uniform accelerationStructureNV topLevelAS;

layout(location = 0) rayPayloadNV vec3 hitValue;

void main() {
	vec2 pixelCenter  = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
	vec2 inUV = pixelCenter / vec2(gl_LaunchSizeNV.xy);
	inUV.y = 1 - inUV.y;
	vec2 ndc = inUV * 2.0 - 1.0;
	

	vec4 origin = ubo.viewInverse * vec4(0.0,0.0,0,1);
	vec4 target = ubo.projInverse * vec4(ndc.x, ndc.y, 1, 1);
	vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz), 0);

	uint rayFlags = gl_RayFlagsOpaqueNV;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 1000.0;

	traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hitValue, 1.0));
}

@miss
layout(location = 0) rayPayloadInNV vec3 hitValue;

void main()  {
	hitValue = vec3(0,0,0.3);
}

@proc-int

hitAttributeNV vec4 hitAttribute;

struct StorageData {
	vec4 sphere;
};

layout(set = 0, binding = 1) readonly buffer Storage {
	 StorageData storageData[]; 
} storage;


void main()
{
	vec4 sphere = storage.storageData[gl_InstanceCustomIndexNV].sphere;
	vec3 center = vec3(0,0,0);
	float radius = 0.5;
	
	vec3 origin = gl_WorldRayOriginNV;
	vec3 direction = gl_WorldRayDirectionNV;
	float tMin = gl_RayTminNV;
	float tMax = gl_RayTmaxNV;

	vec3 oc = origin - center;
	float a = dot(direction, direction);
	float b = dot(oc, direction);
	float c = dot(oc, oc) - radius * radius;
	float discriminant = b * b - a * c;

	if (discriminant >= 0) {
		float t1 = (-b - sqrt(discriminant)) / a;
		float t2 = (-b + sqrt(discriminant)) / a;

		if ((tMin <= t1 && t1 < tMax) || (tMin <= t2 && t2 < tMax))
		{
			hitAttribute = vec4(0,0,0,0.5);
			reportIntersectionNV((tMin <= t1 && t1 < tMax) ? t1 : t2, 0);
		}
	}
}

@proc-chit
hitAttributeNV vec4 hitAttribute;
layout(location = 0) rayPayloadInNV vec3 hitValue;

void main() {
	vec3 center = vec3(0,0,0);
	float radius = 0.5;
	vec3 hitPoint = gl_WorldRayOriginNV + gl_WorldRayDirectionNV * gl_HitTNV;

	vec3 normal = (hitPoint - center) / radius;


	hitValue = vec3(normal.yyy);
}


