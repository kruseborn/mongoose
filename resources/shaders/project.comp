#version 450
#extension GL_ARB_shading_language_420pack : enable

layout(set = 0, binding = 0) uniform Ubo { uint N; }
ubo;

layout(set = 1, binding = 0) buffer U { float x[]; }
u;

layout(set = 2, binding = 0) buffer V { float x[]; }
v;

layout(set = 3, binding = 0) buffer P { float x[]; }
p;

layout(set = 4, binding = 0) buffer Div { float x[]; }
div;

#define localGroupSize 256
layout(local_size_x = localGroupSize) in;

uint IX(uint x, uint y) { return x + y * (ubo.N + 2); }

void set_bnd_p(uint N, uint b, uint i) {
  p.x[IX(0, i)] = b == 1 ? -p.x[IX(1, i)] : p.x[IX(1, i)];
  p.x[IX(N + 1, i)] = b == 1 ? -p.x[IX(N, i)] : p.x[IX(N, i)];
  p.x[IX(i, 0)] = b == 2 ? -p.x[IX(i, 1)] : p.x[IX(i, 1)];
  p.x[IX(i, N + 1)] = b == 2 ? -p.x[IX(i, N)] : p.x[IX(i, N)];

  p.x[IX(0, 0)] = 0.5f * (p.x[IX(1, 0)] + p.x[IX(0, 1)]);
  p.x[IX(0, N + 1)] = 0.5f * (p.x[IX(1, N + 1)] + p.x[IX(0, N)]);
  p.x[IX(N + 1, 0)] = 0.5f * (p.x[IX(N, 0)] + p.x[IX(N + 1, 1)]);
  p.x[IX(N + 1, N + 1)] = 0.5f * (p.x[IX(N, N + 1)] + p.x[IX(N + 1, N)]);
}

void main() {
  const uint N = ubo.N;
  const float h = 1.0 / ubo.N;

  const uint size = (N + 2) * (N + 2);
  uint index = gl_GlobalInvocationID.x;
  while (index < size) {
    uint i = index % (N + 2);
    uint j = index / (N + 2);
    index += gl_NumWorkGroups.x * localGroupSize;
    if (i < 1 || j < 1 || i > N || j > N)
      continue;

    for (uint k = 0; k < 20; k++) {
      p.x[IX(i, j)] =
          (div.x[IX(i, j)] + p.x[IX(i - 1, j)] + p.x[IX(i + 1, j)] + p.x[IX(i, j - 1)] + p.x[IX(i, j + 1)]) / 4;

      memoryBarrierShared();
      barrier();

      set_bnd_p(N, 0, i);

      memoryBarrierShared();
      barrier();
    }
  }
}