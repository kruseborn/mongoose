#version 450
#extension GL_ARB_shading_language_420pack : enable

#include "noise.hglsl"

//==========================================================================================
// hashes
//==========================================================================================

float hash1( vec2 p )
{
    p  = 50.0*fract( p*0.3183099 );
    return fract( p.x*p.y*(p.x+p.y) );
}

float hash1( float n )
{
    return fract( n*17.0*fract( n*0.3183099 ) );
}

vec2 hash2( float n ) { return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); }


vec2 hash2( vec2 p ) 
{
    const vec2 k = vec2( 0.3183099, 0.3678794 );
    p = p*k + k.yx;
    return fract( 16.0 * k*fract( p.x*p.y*(p.x+p.y)) );
}

//==========================================================================================
// noises
//==========================================================================================

// value noise, and its analytical derivatives
vec4 noised( in vec3 x )
{
    vec3 p = floor(x);
    vec3 w = fract(x);
    
    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);
    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);

    float n = p.x + 317.0*p.y + 157.0*p.z;
    
    float a = hash1(n+0.0);
    float b = hash1(n+1.0);
    float c = hash1(n+317.0);
    float d = hash1(n+318.0);
    float e = hash1(n+157.0);
	float f = hash1(n+158.0);
    float g = hash1(n+474.0);
    float h = hash1(n+475.0);

    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    return vec4( -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z), 
                      2.0* du * vec3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,
                                      k2 + k5*u.z + k4*u.x + k7*u.z*u.x,
                                      k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) );
}

float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 w = fract(x);
    
    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);
    
    float n = p.x + 317.0*p.y + 157.0*p.z;
    
    float a = hash1(n+0.0);
    float b = hash1(n+1.0);
    float c = hash1(n+317.0);
    float d = hash1(n+318.0);
    float e = hash1(n+157.0);
	float f = hash1(n+158.0);
    float g = hash1(n+474.0);
    float h = hash1(n+475.0);

    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    return -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z);
}

vec3 noised( in vec2 x )
{
    vec2 p = floor(x);
    vec2 w = fract(x);
    
    vec2 u = w*w*w*(w*(w*6.0-15.0)+10.0);
    vec2 du = 30.0*w*w*(w*(w-2.0)+1.0);
    
    float a = hash1(p+vec2(0,0));
    float b = hash1(p+vec2(1,0));
    float c = hash1(p+vec2(0,1));
    float d = hash1(p+vec2(1,1));

    float k0 = a;
    float k1 = b - a;
    float k2 = c - a;
    float k4 = a - b - c + d;

    return vec3( -1.0+2.0*(k0 + k1*u.x + k2*u.y + k4*u.x*u.y), 
                      2.0* du * vec2( k1 + k4*u.y,
                                      k2 + k4*u.x ) );
}

float noise( in vec2 x )
{
    vec2 p = floor(x);
    vec2 w = fract(x);
    vec2 u = w*w*w*(w*(w*6.0-15.0)+10.0);
    
    float a = hash1(p+vec2(0,0));
    float b = hash1(p+vec2(1,0));
    float c = hash1(p+vec2(0,1));
    float d = hash1(p+vec2(1,1));
    
    return -1.0+2.0*( a + (b-a)*u.x + (c-a)*u.y + (a - b - c + d)*u.x*u.y );
}

layout(set = 0, binding = 0) uniform Ubo {
  vec4 corner;
  vec4 attributes;
  uvec4 N;
  float cellSize;
} ubo;

layout(set = 0, binding = 1) buffer DrawIndirectCommand {
  uint vertexCount;
  uint instanceCount;
  uint firstVertex;
  uint firstInstance;
} drawIndirectCommand;

layout(set = 1, binding = 0) buffer Density { 
  float x[]; 
} density;

layout(set = 2, binding = 0) buffer A2iTriangleConnectionTable { 
  int x[256][16]; 
} a2iTriangleConnectionTable;

layout(set = 3, binding = 0) buffer AiCubeEdgeFlags { 
  int x[256]; 
} aiCubeEdgeFlags;

struct Triangle {
  vec4 v[6]; // vertices, normals
};

layout(set = 4, binding = 0) writeonly buffer Mesh {
  Triangle triangles[100000];
} mesh;

const vec3 vertexOffset[8] = {{0.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 1.0, 0.0}, {0.0, 1.0, 0.0},
                                          {0.0, 0.0, 1.0}, {1.0, 0.0, 1.0}, {1.0, 1.0, 1.0}, {0.0, 1.0, 1.0}};

const int a2iEdgeConnection[12][2] = {{0, 1}, {1, 2}, {2, 3}, {3, 0}, {4, 5}, {5, 6},
                                                  {6, 7}, {7, 4}, {0, 4}, {1, 5}, {2, 6}, {3, 7}};

// a2fEdgeDirection lists the direction vector (vertex1-vertex0) for each edge in the cube
const vec3 a2fEdgeDirection[12] = {{1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {-1.0, 0.0, 0.0}, {0.0, -1.0, 0.0},
                                               {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {-1.0, 0.0, 0.0}, {0.0, -1.0, 0.0},
                                               {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0},  {0.0, 0.0, 1.0}};

// a2fVertexOffset lists the positions, relative to vertex0, of each of the 8 vertices of a cube
const vec3 a2fVertexOffset[8] = {{0.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 1.0, 0.0}, {0.0, 1.0, 0.0},
                                             {0.0, 0.0, 1.0}, {1.0, 0.0, 1.0}, {1.0, 1.0, 1.0}, {0.0, 1.0, 1.0}};

float isoValue = 0.0;

float saturate(float x)
{
  return max(0, min(1, x));
}
const mat2 m2 = mat2(  0.80,  0.60,
                      -0.60,  0.80 );

float fbm_9( in vec2 x )
{
    float f = 1.9;
    float s = 0.55;
    float a = 0.0;
    float b = 0.5;
    for( int i=0; i<9; i++ )
    {
        float n = noise(x);
        a += b*n;
        b *= s;
        x = f*m2*x;
    }
	return a;
}

float terrainMap( in vec2 p )
{
    const float sca = 0.0010;
    const float amp = 300.0;

    p *= sca;
    float e = fbm_9( p + vec2(1.0,-2.0) );
    //float a = 1.0-smoothstep( 0.12, 0.13, abs(e+0.12) ); // flag high-slope areas (-0.25, 0.0)
    e = e + 0.15*smoothstep( -0.08, -0.01, e );
    e *= amp;
    return e;
}


float map(vec3 pos) {

  float offset = ubo.corner.w;
  float lacunarity = ubo.attributes.x;
  float persistence = ubo.attributes.y;
  float noisescale = ubo.attributes.z;
  float noiseweight = ubo.attributes.w;

  float weightMultiplier = 1.89;
 float density = -pos.y;

const int octaves = int(ubo.N.w);


float noise = 0;

float frequency = noisescale/100;
float amplitude = 1;
float weight = 1;
for (int j = 0; j < octaves; j ++) {
    float n = snoise(pos* frequency + offset);
    float v = 1-abs(n);
    v = v*v;
    v *= weight;
    weight = max(min(v*weightMultiplier,1),0);
    noise += v * amplitude;
    amplitude *= persistence;
    frequency *= lacunarity;
}

 noise = -pos.y + noise * noiseweight;
 if(pos.y < 3)
  noise += 100;

  return noise;
}

vec3 getNormal(vec3 pos) {
  // finds the gradient of the scalar field at a point
  // This gradient can be used as a very accurate vertx normal for lighting calculations
  vec3 normal;
  float step = 1 / float(ubo.N.x);
  normal.x = map(vec3(pos.x + step, pos.y, pos.z)) - map(vec3(pos.x - step, pos.y, pos.z));
  normal.y = map(vec3(pos.x, pos.y + step, pos.z)) - map(vec3(pos.x, pos.y - step, pos.z));
  normal.z = map(vec3(pos.x, pos.y, pos.z + step)) - map(vec3(pos.x, pos.y, pos.z - step));
  if (length(normal) == 0)
    return vec3(0, 0, 1);
  return normalize(normal) * -1.0;
}

float isoOffset(float fValue1, float fValue2, float fValueDesired) {
  float fDelta = fValue2 - fValue1;
  if (fDelta == 0.0) {
    return 0.5;
  }
  return (fValueDesired - fValue1) / fDelta;
}

#define localGroupSize 256
layout(local_size_x = localGroupSize) in;

 vec3 toPos(uint index, uvec3 size) {
	uint z = index / (size.x * size.y);
  uint y = (index  - (size.x * size.y * z)) / size.x;
	uint x = index - z * size.x * size.y - y * size.x;
  
	return vec3(float(x),float(y),float(z)) * ubo.cellSize + ubo.corner.xyz;
}

void main() {
//   atomicExchange(drawIndirectCommand.instanceCount, 1);
//  atomicExchange(drawIndirectCommand.vertexCount, 0);
//   memoryBarrierBuffer();
//   barrier();
//   memoryBarrier();

  const uint size = ubo.N.x * ubo.N.y * ubo.N.z;
	uint index = gl_GlobalInvocationID.x;

  while(index < size) {
    const uint currentIndex = index;
		index += gl_NumWorkGroups.x * localGroupSize;

    float afCubeValue[8];
    vec3 asEdgeVertex[12];
    float asEdgeVertexNoise[12];

    uint flagIndex = 0;
    const vec3 pos = toPos(currentIndex, ubo.N.xyz);
    for (uint i = 0; i < 8; i++) {
      vec3 cornerPos = pos + vertexOffset[i] * ubo.cellSize;
      afCubeValue[i] = map(cornerPos);
      if (afCubeValue[i] < isoValue) {
        flagIndex |= 1 << i;
      }
    }

    // Find which edges are intersected by the surface
    int edgeFlags = aiCubeEdgeFlags.x[flagIndex];
    if (edgeFlags == 0) {
      continue;
    }
    // Find the point of intersection of the surface with each edge
    // Then find the normal to the surface at those points
    for (uint i = 0; i < 12; i++) {
      // if there is an intersection on this edge
      if ((edgeFlags & (1 << i)) != 0) {
        const float isoValueOffset = isoOffset(afCubeValue[a2iEdgeConnection[i][0]], afCubeValue[a2iEdgeConnection[i][1]], isoValue);
        asEdgeVertexNoise[i] = isoValueOffset;
        asEdgeVertex[i] = pos + (a2fVertexOffset[a2iEdgeConnection[i][0]] + isoValueOffset * a2fEdgeDirection[i]) * ubo.cellSize;
      }
    }
    for (uint i = 0; i < 5; i++) {
      if (a2iTriangleConnectionTable.x[flagIndex][3 * i] < 0)
        break;
      Triangle triangle;
      for (uint j = 0; j < 3; j++) {
        int vertexIndex = a2iTriangleConnectionTable.x[flagIndex][3 * i + j];
        triangle.v[j*2] = vec4(asEdgeVertex[vertexIndex], 1.0);
        triangle.v[j*2 + 1] = vec4(getNormal(triangle.v[j*2].xyz), asEdgeVertexNoise[vertexIndex]);
      }
      uint vertexCount = atomicAdd(drawIndirectCommand.vertexCount, 3) / 3;
      mesh.triangles[vertexCount] = triangle;
    }
  }
}

